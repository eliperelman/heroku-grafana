/*! grafana - v3.1.1-1470047149 - 2016-08-01
 * Copyright (c) 2016 Torkel Ã–degaard; Licensed Apache-2.0 */

define(["app/features/dashboard/dynamic_dashboard_srv","app/features/dashboard/dashboardSrv"],function(){"use strict";function a(a,b){describe(a,function(){var a={};a.setup=function(b){beforeEach(module("grafana.services")),beforeEach(module("grafana.core")),beforeEach(module(function(a){a.value("contextSrv",{user:{timezone:"utc"}})})),beforeEach(inject(function(c,d){a.dynamicDashboardSrv=c,a.dashboardSrv=d;var e={rows:[],templating:{list:[]}};b(e),a.dash=a.dashboardSrv.create(e),a.dynamicDashboardSrv.init(a.dash),a.rows=a.dash.rows}))},b(a)})}a("given dashboard with panel repeat",function(a){a.setup(function(a){a.rows.push({panels:[{id:2,repeat:"apps"}]}),a.templating.list.push({name:"apps",current:{text:"se1, se2, se3",value:["se1","se2","se3"]},options:[{text:"se1",value:"se1",selected:!0},{text:"se2",value:"se2",selected:!0},{text:"se3",value:"se3",selected:!0},{text:"se4",value:"se4",selected:!1}]})}),it("should repeat panel one time",function(){expect(a.rows[0].panels.length).to.be(3)}),it("should mark panel repeated",function(){expect(a.rows[0].panels[0].repeat).to.be("apps"),expect(a.rows[0].panels[1].repeatPanelId).to.be(2)}),it("should set scopedVars on panels",function(){expect(a.rows[0].panels[0].scopedVars.apps.value).to.be("se1"),expect(a.rows[0].panels[1].scopedVars.apps.value).to.be("se2"),expect(a.rows[0].panels[2].scopedVars.apps.value).to.be("se3")}),describe("After a second iteration",function(){var b;beforeEach(function(){b=a.rows[0].panels[1],a.rows[0].panels[0].fill=10,a.dynamicDashboardSrv.update(a.dash)}),it("should have reused same panel instances",function(){expect(a.rows[0].panels[1]).to.be(b)}),it("reused panel should copy properties from source",function(){expect(a.rows[0].panels[1].fill).to.be(10)}),it("should have same panel count",function(){expect(a.rows[0].panels.length).to.be(3)})}),describe("After a second iteration and selected values reduced",function(){beforeEach(function(){a.dash.templating.list[0].options[1].selected=!1,a.dynamicDashboardSrv.update(a.dash)}),it("should clean up repeated panel",function(){expect(a.rows[0].panels.length).to.be(2)})}),describe("After a second iteration and panel repeat is turned off",function(){beforeEach(function(){a.rows[0].panels[0].repeat=null,a.dynamicDashboardSrv.update(a.dash)}),it("should clean up repeated panel",function(){expect(a.rows[0].panels.length).to.be(1)}),it("should remove scoped vars from reused panel",function(){expect(a.rows[0].panels[0].scopedVars).to.be.empty()})})}),a("given dashboard with row repeat",function(a){a.setup(function(a){a.rows.push({repeat:"servers",panels:[{id:2}]}),a.rows.push({panels:[]}),a.templating.list.push({name:"servers",current:{text:"se1, se2",value:["se1","se2"]},options:[{text:"se1",value:"se1",selected:!0},{text:"se2",value:"se2",selected:!0}]})}),it("should repeat row one time",function(){expect(a.rows.length).to.be(3)}),it("should keep panel ids on first row",function(){expect(a.rows[0].panels[0].id).to.be(2)}),it("should keep first row as repeat",function(){expect(a.rows[0].repeat).to.be("servers")}),it("should clear repeat field on repeated row",function(){expect(a.rows[1].repeat).to.be(null)}),it("should add scopedVars to rows",function(){expect(a.rows[0].scopedVars.servers.value).to.be("se1"),expect(a.rows[1].scopedVars.servers.value).to.be("se2")}),it("should generate a repeartRowId based on repeat row index",function(){expect(a.rows[1].repeatRowId).to.be(1),expect(a.rows[1].repeatIteration).to.be(a.dynamicDashboardSrv.iteration)}),it("should set scopedVars on row panels",function(){expect(a.rows[0].panels[0].scopedVars.servers.value).to.be("se1"),expect(a.rows[1].panels[0].scopedVars.servers.value).to.be("se2")}),describe("After a second iteration",function(){var b;beforeEach(function(){b=a.rows[1],a.rows[0].height=500,a.dynamicDashboardSrv.update(a.dash)}),it("should still only have 2 rows",function(){expect(a.rows.length).to.be(3)}),it.skip("should have updated props from source",function(){expect(a.rows[1].height).to.be(500)}),it("should reuse row instance",function(){expect(a.rows[1]).to.be(b)})}),describe("After a second iteration and selected values reduced",function(){beforeEach(function(){a.dash.templating.list[0].options[1].selected=!1,a.dynamicDashboardSrv.update(a.dash)}),it("should remove repeated second row",function(){expect(a.rows.length).to.be(2)})})}),a("given dashboard with row repeat and panel repeat",function(a){a.setup(function(a){a.rows.push({repeat:"servers",panels:[{id:2,repeat:"metric"}]}),a.templating.list.push({name:"servers",current:{text:"se1, se2",value:["se1","se2"]},options:[{text:"se1",value:"se1",selected:!0},{text:"se2",value:"se2",selected:!0}]}),a.templating.list.push({name:"metric",current:{text:"m1, m2",value:["m1","m2"]},options:[{text:"m1",value:"m1",selected:!0},{text:"m2",value:"m2",selected:!0}]})}),it("should repeat row one time",function(){expect(a.rows.length).to.be(2)}),it("should repeat panel on both rows",function(){expect(a.rows[0].panels.length).to.be(2),expect(a.rows[1].panels.length).to.be(2)}),it("should keep panel ids on first row",function(){expect(a.rows[0].panels[0].id).to.be(2)}),it("should mark second row as repeated",function(){expect(a.rows[0].repeat).to.be("servers")}),it("should clear repeat field on repeated row",function(){expect(a.rows[1].repeat).to.be(null)}),it("should generate a repeartRowId based on repeat row index",function(){expect(a.rows[1].repeatRowId).to.be(1)}),it("should set scopedVars on row panels",function(){expect(a.rows[0].panels[0].scopedVars.servers.value).to.be("se1"),expect(a.rows[1].panels[0].scopedVars.servers.value).to.be("se2")})})});